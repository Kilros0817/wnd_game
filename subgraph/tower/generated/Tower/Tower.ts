// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DragonClaimed extends ethereum.Event {
  get params(): DragonClaimed__Params {
    return new DragonClaimed__Params(this);
  }
}

export class DragonClaimed__Params {
  _event: DragonClaimed;

  constructor(event: DragonClaimed) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get unstaked(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get earned(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TokenStaked extends ethereum.Event {
  get params(): TokenStaked__Params {
    return new TokenStaked__Params(this);
  }
}

export class TokenStaked__Params {
  _event: TokenStaked;

  constructor(event: TokenStaked) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get isWizard(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WizardClaimed extends ethereum.Event {
  get params(): WizardClaimed__Params {
    return new WizardClaimed__Params(this);
  }
}

export class WizardClaimed__Params {
  _event: WizardClaimed;

  constructor(event: WizardClaimed) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get unstaked(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get earned(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Tower extends ethereum.SmartContract {
  static bind(address: Address): Tower {
    return new Tower("Tower", address);
  }

  DAILY_GP_RATE(): BigInt {
    let result = super.call("DAILY_GP_RATE", "DAILY_GP_RATE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DAILY_GP_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DAILY_GP_RATE",
      "DAILY_GP_RATE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  GP_CLAIM_TAX_PERCENTAGE(): BigInt {
    let result = super.call(
      "GP_CLAIM_TAX_PERCENTAGE",
      "GP_CLAIM_TAX_PERCENTAGE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_GP_CLAIM_TAX_PERCENTAGE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "GP_CLAIM_TAX_PERCENTAGE",
      "GP_CLAIM_TAX_PERCENTAGE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAXIMUM_GLOBAL_GP(): BigInt {
    let result = super.call(
      "MAXIMUM_GLOBAL_GP",
      "MAXIMUM_GLOBAL_GP():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAXIMUM_GLOBAL_GP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAXIMUM_GLOBAL_GP",
      "MAXIMUM_GLOBAL_GP():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_RANK(): i32 {
    let result = super.call("MAX_RANK", "MAX_RANK():(uint8)", []);

    return result[0].toI32();
  }

  try_MAX_RANK(): ethereum.CallResult<i32> {
    let result = super.tryCall("MAX_RANK", "MAX_RANK():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  MINIMUM_TO_EXIT(): BigInt {
    let result = super.call(
      "MINIMUM_TO_EXIT",
      "MINIMUM_TO_EXIT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MINIMUM_TO_EXIT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINIMUM_TO_EXIT",
      "MINIMUM_TO_EXIT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateRewards(tokenId: BigInt): BigInt {
    let result = super.call(
      "calculateRewards",
      "calculateRewards(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_calculateRewards(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateRewards",
      "calculateRewards(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gpToken(): Address {
    let result = super.call("gpToken", "gpToken():(address)", []);

    return result[0].toAddress();
  }

  try_gpToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("gpToken", "gpToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC721Received(
    param0: Address,
    from: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    from: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  randomDragonOwner(seed: BigInt): Address {
    let result = super.call(
      "randomDragonOwner",
      "randomDragonOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(seed)]
    );

    return result[0].toAddress();
  }

  try_randomDragonOwner(seed: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "randomDragonOwner",
      "randomDragonOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(seed)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  randomizer(): Address {
    let result = super.call("randomizer", "randomizer():(address)", []);

    return result[0].toAddress();
  }

  try_randomizer(): ethereum.CallResult<Address> {
    let result = super.tryCall("randomizer", "randomizer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rescueEnabled(): boolean {
    let result = super.call("rescueEnabled", "rescueEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_rescueEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("rescueEnabled", "rescueEnabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalGPEarned(): BigInt {
    let result = super.call("totalGPEarned", "totalGPEarned():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalGPEarned(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalGPEarned",
      "totalGPEarned():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasureChestTypeId(): BigInt {
    let result = super.call(
      "treasureChestTypeId",
      "treasureChestTypeId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_treasureChestTypeId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "treasureChestTypeId",
      "treasureChestTypeId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wndGame(): Address {
    let result = super.call("wndGame", "wndGame():(address)", []);

    return result[0].toAddress();
  }

  try_wndGame(): ethereum.CallResult<Address> {
    let result = super.tryCall("wndGame", "wndGame():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wndNFT(): Address {
    let result = super.call("wndNFT", "wndNFT():(address)", []);

    return result[0].toAddress();
  }

  try_wndNFT(): ethereum.CallResult<Address> {
    let result = super.tryCall("wndNFT", "wndNFT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddManyToTowerAndFlightCall extends ethereum.Call {
  get inputs(): AddManyToTowerAndFlightCall__Inputs {
    return new AddManyToTowerAndFlightCall__Inputs(this);
  }

  get outputs(): AddManyToTowerAndFlightCall__Outputs {
    return new AddManyToTowerAndFlightCall__Outputs(this);
  }
}

export class AddManyToTowerAndFlightCall__Inputs {
  _call: AddManyToTowerAndFlightCall;

  constructor(call: AddManyToTowerAndFlightCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenIds(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }
}

export class AddManyToTowerAndFlightCall__Outputs {
  _call: AddManyToTowerAndFlightCall;

  constructor(call: AddManyToTowerAndFlightCall) {
    this._call = call;
  }
}

export class ClaimManyFromTowerAndFlightCall extends ethereum.Call {
  get inputs(): ClaimManyFromTowerAndFlightCall__Inputs {
    return new ClaimManyFromTowerAndFlightCall__Inputs(this);
  }

  get outputs(): ClaimManyFromTowerAndFlightCall__Outputs {
    return new ClaimManyFromTowerAndFlightCall__Outputs(this);
  }
}

export class ClaimManyFromTowerAndFlightCall__Inputs {
  _call: ClaimManyFromTowerAndFlightCall;

  constructor(call: ClaimManyFromTowerAndFlightCall) {
    this._call = call;
  }

  get tokenIds(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }

  get unstake(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ClaimManyFromTowerAndFlightCall__Outputs {
  _call: ClaimManyFromTowerAndFlightCall;

  constructor(call: ClaimManyFromTowerAndFlightCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RescueCall extends ethereum.Call {
  get inputs(): RescueCall__Inputs {
    return new RescueCall__Inputs(this);
  }

  get outputs(): RescueCall__Outputs {
    return new RescueCall__Outputs(this);
  }
}

export class RescueCall__Inputs {
  _call: RescueCall;

  constructor(call: RescueCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class RescueCall__Outputs {
  _call: RescueCall;

  constructor(call: RescueCall) {
    this._call = call;
  }
}

export class SetContractsCall extends ethereum.Call {
  get inputs(): SetContractsCall__Inputs {
    return new SetContractsCall__Inputs(this);
  }

  get outputs(): SetContractsCall__Outputs {
    return new SetContractsCall__Outputs(this);
  }
}

export class SetContractsCall__Inputs {
  _call: SetContractsCall;

  constructor(call: SetContractsCall) {
    this._call = call;
  }

  get _wndNFT(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _gp(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _wndGame(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _rand(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SetContractsCall__Outputs {
  _call: SetContractsCall;

  constructor(call: SetContractsCall) {
    this._call = call;
  }
}

export class SetPausedCall extends ethereum.Call {
  get inputs(): SetPausedCall__Inputs {
    return new SetPausedCall__Inputs(this);
  }

  get outputs(): SetPausedCall__Outputs {
    return new SetPausedCall__Outputs(this);
  }
}

export class SetPausedCall__Inputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }

  get _paused(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPausedCall__Outputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }
}

export class SetRescueEnabledCall extends ethereum.Call {
  get inputs(): SetRescueEnabledCall__Inputs {
    return new SetRescueEnabledCall__Inputs(this);
  }

  get outputs(): SetRescueEnabledCall__Outputs {
    return new SetRescueEnabledCall__Outputs(this);
  }
}

export class SetRescueEnabledCall__Inputs {
  _call: SetRescueEnabledCall;

  constructor(call: SetRescueEnabledCall) {
    this._call = call;
  }

  get _enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetRescueEnabledCall__Outputs {
  _call: SetRescueEnabledCall;

  constructor(call: SetRescueEnabledCall) {
    this._call = call;
  }
}

export class SetTreasureChestIdCall extends ethereum.Call {
  get inputs(): SetTreasureChestIdCall__Inputs {
    return new SetTreasureChestIdCall__Inputs(this);
  }

  get outputs(): SetTreasureChestIdCall__Outputs {
    return new SetTreasureChestIdCall__Outputs(this);
  }
}

export class SetTreasureChestIdCall__Inputs {
  _call: SetTreasureChestIdCall;

  constructor(call: SetTreasureChestIdCall) {
    this._call = call;
  }

  get typeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTreasureChestIdCall__Outputs {
  _call: SetTreasureChestIdCall;

  constructor(call: SetTreasureChestIdCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
